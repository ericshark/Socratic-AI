import crypto from "node:crypto";

import type { ChatMessage, ChatOptions, LLMAdapter } from "../types";

function hashMessage(messages: ChatMessage[]) {
  const last = messages.at(-1);
  const seed = last?.content ?? "socratic";
  return crypto.createHash("sha256").update(seed).digest("hex").slice(0, 24);
}

export class MockAdapter implements LLMAdapter {
  async chat(messages: ChatMessage[], _opts?: ChatOptions) {
    const signature = hashMessage(messages);
    const lastContent = messages.at(-1)?.content ?? "";

    if (lastContent.includes("Decision Brief Composer")) {
      return `## Context
Demo context derived from mock adapter (${signature}).`;
    }

    if (lastContent.includes("Socratic Question Coach")) {
      return JSON.stringify([
        {
          id: `${signature}-q1`,
          role: "coach",
          text: "What assumption, if wrong, would sink this decision?",
        },
        {
          id: `${signature}-q2`,
          role: "critic",
          text: "Which alternative have you ruled out too fast?",
        },
        {
          id: `${signature}-q3`,
          role: "mapper",
          text: "What fresh evidence could raise or lower confidence?",
        },
      ]);
    }

    if (lastContent.includes("Socratic Mapper Prompt")) {
      return JSON.stringify({
        assumptions: [
          { text: "Mock assumption about adoption", confidence: 0.6 },
        ],
        options: [
          { text: "Mock option A", notes: "Generated by mock adapter" },
          { text: "Mock option B" },
        ],
        evidence: [{ text: "Mock survey result", weight: 0.5 }],
        risks: [{ text: "Mock risk: engagement may drop", mitigation: "Pilot first" }],
        criteria: [
          { name: "Impact", weight: 0.4 },
          { name: "Effort", weight: 0.3 },
          { name: "Confidence", weight: 0.3 },
        ],
        biasFlags: [{ type: "single-option", note: "Only one real path discussed." }],
      });
    }

    if (lastContent.includes("Devil's Advocate Critic")) {
      return [
        "- **Missing counterfactual** — explore how success metrics change if the team delays launch 30 days.",
        "- **Evidence gap** — current signals rely on qualitative feedback; add a quantitative guardrail.",
        "- **Bias alert** — options cluster around a single implementation path; force a do-nothing baseline.",
      ].join("\n");
    }

    return `MOCK::${signature}`;
  }
}
